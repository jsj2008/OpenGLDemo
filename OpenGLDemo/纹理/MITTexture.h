//
//  MITTexture.h
//  OpenGLDemo
//
//  Created by MENGCHEN on 2017/3/16.
//  Copyright © 2017年 HongtaiCaifu. All rights reserved.
//

#import <Foundation/Foundation.h>
/*
 + 纹理：
    - 纹理是一个用来保存图像的颜色元素值的 OpenGL ES 缓存。纹理可以使用任何图像。当把纹理应用到集合图形中后，会使渲染的场景显得更自然。
    - 纹理坐标系有一个命名为 S 和 T 的2D 轴。一个纹理中无论多少个纹素，纹理的尺寸永远是 S 轴和 T 轴上都是从0.0到1.0。
 + 对齐纹理和几何图形
    - 每个定点的 X.Y.Z 坐标被转换成```视点坐标```之后，GPU 会设置转换生成三角形内的每个像素的颜色。
    - 转换几何形状数据为帧缓存中的颜色像素的渲染步骤叫做光栅化（点阵化），每个颜色的像素叫做片元。
    - 当没有使用纹理的时候，GPU 会根据包含该片元的对象的顶点的颜色来计算每个片元的颜色。
    - 当设置了使用纹理后，GPU 会根据在当前绑定的纹理缓存中的纹素来计算每个片元的颜色。
    - 让 GPU 知道每个片元的颜色由那些纹素来决定。这个对齐叫做映射。通过扩展为每个定点保存的数据来实现的。
    - 每个定点还给出了 U 和 V 的坐标值。每个 U 坐标会映射顶点在视点中的最终位置到纹理中的沿着 S 轴的位置。V 坐标映射到 T 轴
 + 纹理的取样模式
    - 每个顶点 的 U 和 V 坐标会附加到每个定点在视点坐标中的最终位置。然后 GPU 会根据计算出来的每个片元的 U、V 位置从绑定的纹理中选择纹素。这个选择过程叫做取样。取样会把纹理的 S 和 T 坐标系与每个渲染的三角形的定点的 U、V 坐标匹起来
 */
@interface MITTexture : NSObject


@end
